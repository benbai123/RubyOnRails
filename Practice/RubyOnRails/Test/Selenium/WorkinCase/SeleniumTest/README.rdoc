== README
=== Introduction

This is a sample project regarding how to run Selenium Auto Testing with Rails from terminal or Jenkins.

* Target
Let anyone who can type in terminal and editor can run Selenium Browser Automation easily in less than half hour (at least, on Ubuntu 14.04).

* Ruby version
2.1

* How to run the test suite

    rake test:fileset

=== Outline

{Deployment Instructions}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#deployment-instructions] : Run it quickly from terminal at local machine.


{Run With Remote WebDriver}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#run-with-remote-webdriver] : Run it with Remote WebDriver to test with Selenium Standalone Server on Remote (or Local) machine.


{Run With Jenkins}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#run-with-jenkins] : Run it with Jenkins.


{Detail of Visual Testing}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#detail-of-visual-testing] : More detail with respect to Visual Testing.


{Jenkins Job Settings}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#jenkins-job-settings] : More information about variables.


selenium_methods_test.rb[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/SeleniumTest/test/integration/selenium_methods_test.rb] and {Ruby Bindings}[https://code.google.com/p/selenium/wiki/RubyBindings] : Frequently used Selenium functions in Ruby.


{Make Development Assistant}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#make-development-assistant] : Use a hidden parameter "autoretest" to make test case works as an assistant.


{Related Articles}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#related-articles] : Some of my blog post that related to this project, check them if you want to know more details and build / customize project yourself.


==== 　
==== 　
=== Deployment Instructions

At first, you need to install Rails 4.1, the commands on Ubuntu 14.04 are:

    # Install ruby 2.1
    sudo add-apt-repository ppa:brightbox/ruby-ng
    sudo apt-get update
    sudo apt-get install ruby2.1
    
    # Install ruby Dev-Kit
    sudo apt-get install ruby2.1-dev
    
    # Install sqlite3 (but no DB Needed for this project)
    sudo apt-get install sqlite3
    
    # Install sqlite3 Dev-Kit
    sudo apt-get install libsqlite3-dev
    
    # Install nodejs (javascript-runtime)
    sudo apt-get install nodejs
    
    # Install Rails
    sudo gem install rails -v "=4.1"

Then clone this repository, after that you should be able to run it from terminal:
    
    # install git
    sudo apt-get install git
    # clone repository
    git clone https://github.com/benbai123/RubyOnRails.git
    # go to this project
    cd RubyOnRails/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest
    # bundle install
    bundle install
    
    # For correct output information, modify
    # test/test_helper.rb#L158 based on
    # URL/Port of your environment
    
    # get IP information from terminal
    ifconfig
    # modify test/test_helper.rb
    gedit test/test_helper.rb
    # than close gedit and continue
    
    # run all integration test with the customized flow
    rake test:fileset
    # or run all specified cases (under test/integration)
    # cases="['case1', 'case2', ...]" rake test:fileset
    
also remember run rails app in another terminal window

    #
    # 2 majore pages
    # http://localhost:3000/vt/browse
    # and
    # http://localhost:3000/vt/cases
    #
    rails s

You can also refer to the short video contains whole process above:

{Rails Selenium Working Case Deployment Instructions}[https://www.youtube.com/watch?v=vnXCo-JBfLg]

Or the long video including 5 minutes for install Rails and 4 minutes for clone this project

{Rails Selenium Working Case Deployment Instructions (Full)}[https://www.youtube.com/watch?v=prN3O1THFNI]

If you run test cases with Jenkins often, you probably will want to run rails app with user jenkins for permission issue (Regarding to manage images from visual testing):

    # cd to rails project folder first
     
    # make rails project folder can be
    # accessed by jenkins
    # use 777 or any other proper value
    sudo chmod 777 -R .
     
    # switch user to jenkins
    sudo su jenkins
     
    # start rails app by user jenkins
    rails s

<b>NOTE:</b> Just remind again, for correct output information, you need to modify test_helper.rb#L158[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest/test/test_helper.rb#L158] based on URL/Port of your environment


<b>NOTE 2:</b> Currently ovrride class ActionDispatch::IntegrationTest and add test_sanity method into it (see test_helper.rb#L165[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest/test/test_helper.rb#L165]) so you just need to provie doTest method in each test case. This will cause one extra run so take care of this if you want to do some statistics.

You can also remove test_sanity from class ActionDispatch::IntegrationTest and move it into each test case to avoid the extra run.

==== 　
==== 　
=== Run With Remote WebDriver

Before you continue this part, make sure you have done previous part {Deployment Instructions}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#deployment-instructions]


Can skip this part if you just want to run it on local machine from terminal.

===== Start Selenium-Standalone-Server

There are already some ready-to-use resources in this repo (but not in this project).

For remote windows machine, assume you already installed JDK/JRE like JDK7[http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html] to execute .jar file, also assume you have installed {Github Desktop}[https://desktop.github.com/] or something else and has git-shell to use.

For Internet Explorer, you will need to make all sites using the same protect mode setting (All enabled or disabled, this part will be included in the Full demo video below).

The first step is still clone this project if needed, then

* For Windows

Go to win_folder[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/SeleniumTest/vendor/win_folder]
Then simply double-click selenium/*.bat to launch Selenium Standalone Server.

selenium/startup.bat[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/SeleniumTest/vendor/win_folder/selenium/startup.bat]
Port 4444, Support IE, Chrome and Firefox Portable v_38.

selenium/startOpera.bat[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/SeleniumTest/vendor/win_folder/selenium/startOpera.bat]
Port 5555, Support IE, Opera and Firefox Portable v_39.

selenium/startup64.bat[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/SeleniumTest/vendor/win_folder/selenium/startup64.bat]
Port 4444, Support IE(64-bit), Chrome and Firefox Portable v_38.

You can start multiple Selenium Standalone Server on different ports if needed.

* For Ubuntu

Go to ubuntu_folder[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/SeleniumTest/vendor/ubuntu_folder]
Then run selenium/startup.sh to launch Selenium Standalone Server, it supports only Firefox.

===== Run with "browsers" parameter

Assume you have started Selenium Standalone Server with startup.bat and startOpera.bat on Windows, the IP of Windows machine is 192.168.31.169, then you can test IE and Opera by specify a 'browsers' array as below:

    browsers="[{'url' => '192.168.31.169', 'port' => '5555', 'browser' => 'opera'}, {'url' => '192.168.31.169', 'browser' => 'internet_explorer'}]" rake test:fileset


The short vidwo below shows how to start Selenium Standalone Server on windows and test it remotely:

{Rails Selenium Working Case Run With Remote WebDriver}[https://www.youtube.com/watch?v=tBdpj0CDz9Q]

The Full version including IE settings and 4 minutes for clone this project.

{Rails Selenium Working Case Run With Remote WebDriver (Full)}[https://www.youtube.com/watch?v=cWc3TeaBs6A]

==== 　
==== 　
=== Run With Jenkins

Before you continue this part, make sure you have done previous two parts {Deployment Instructions}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#deployment-instructions] and {Run With Remote WebDriver}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#run-with-remote-webdriver]


Can skip this part if you just want to run it from terminal.


<b>NOTE:</b> Jenkins or scheduled crontab can only test with Remote WebDriver except using headless browser, if you are interested, see {How to run rspec tests using selenium through cron}[http://stackoverflow.com/questions/7275932/how-to-run-rspec-tests-using-selenium-through-cron] for more information.

===== Install Jenkins

First need to install Jenkins with a few commands:

    # Install Oracle JDK/JRE
    # (You can choose any other JDK/JRE you want)
    sudo apt-get install python-software-properties
    sudo add-apt-repository ppa:webupd8team/java
    sudo apt-get update
    sudo apt-get install oracle-java7-installer

    # Install Jenkins
    wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
    sudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list'
    sudo apt-get update
    sudo apt-get install jenkins

Now you can link to jenkins at localhost and start to use it:

http://localhost:8080/
(The first time probably load longer)

===== Create Jenkins Job

From Jenkins dashboard, click New Item, select Freestyle project and fill the fields as described in {Jenkins Job Settings}[https://github.com/benbai123/RubyOnRails/tree/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest#jenkins-job-settings]

===== Run it by Jenkins

Change mode of the folder test/visualTesting first.

    chmod 777 -R test/visualTesting

From Project page, click Build with parameters and fill/modify parameters as needed then run it.

The short video below for this part:
{Rails Selenium Working Case Run With Jenkins}[https://www.youtube.com/watch?v=9YN2-CjIyUo]

==== 　
==== 　
=== Jenkins Job Settings

===== This build is parameterized

There are four parameters, cases, browsers, pageurl and skipRealDiff

<b>NOTE:</b> The default values are just sample values, edit them as needed.

cases, Type: String, Usage: used to specify a set of test cases to run.

Required? False, will run all test case under test/integration if missing.

    Default value
    ['simple_test']
    Desc
    test case name, quoted with single quote, separated with comma


browsers, Type: String, Usage: used to specify a set of remote browsers to test.

Required? True if run with Jenkins since Jenkins can only run with Remote WebDriver. False if run with terminal.

    Default value
    [{'url' => '192.168.31.169'}, {'url' => '192.168.31.169', 'browser' => 'internet_explorer'}]
    Desc
    # usage:
    # [{'url' => 'remote url', 'port' => 'port number', 'browser' => 'browser name', 'caps' => capabilities_hash}, ...]
    
    # url: required, url of remote selnium server
    # port: optional, default '4444'
    # browser: optional, default 'firefox', also supports 'internet_explorer', 'chrome', 'opera'
    # caps: optional, will override desired capabilities if provided
    
    # e.g.
    # [{'url' => '192.168.31.169'}]
    # 
    # [{'url' => '192.168.31.169'}, {'url' => '192.168.31.169', 'port' => '5555', 'browser' => 'opera'}]
    # 
    # [{'url' => '192.168.31.169','browser' => 'chrome'}, {'url' => '192.168.31.169', 'port' => '5555', 'browser' => 'opera'}]
    # 
    # [{'url' => '192.168.31.169','browser' => 'chrome', 'caps' => {'chromeOptions' => {'args' => ['--ignore-certificate-errors', '--disable-popup-blocking', '--disable-translate', '--test-type']}}}, {'url' => '192.168.31.169', 'browser' => 'internet_explorer'}]


pageurl, Type: String, Usage: provide a way to set the URL of Web Page to connect.

Required? False, just use it as needed.

If you specified it, you can get it by calling getPageURL in test case (if extends ActionDispatch::IntegrationTest), see

test_helper.rb#L186[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest/test/test_helper.rb#L186]

    Default value
    http://192.168.31.169:8080
    Desc
    domain url including port of web server


skipRealDiff, Type: String, Usage: specify whether skip image processing.

Required? False, will do image processing and probably take a loooong time if missing.

Most of the time is caused by ChunkyPNG::Image.from_file since decoding PNG files is slow.

    Default value
    true
    Desc
    whether skip diff process, just compare binary file (will be much faster)
    any value will be faise except 'true'

===== Build step (Execute shell)

<b>NOTE:</b> update the path of first cd command as needed.

    # go to folder of test rails app
    cd /home/benbai/Things/github/RubyOnRails/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest
    
    # run test case, all images of visual testing will be stored in test/visualTesting/Jenkins
    failedmark=$BUILD_NUMBER skipRealDiff=$skipRealDiff task_filename=$BUILD_TAG runner="Jenkins" pageurl=$pageurl cases=$cases browsers=$browsers rake test:fileset
    
    # chmod so other user can manage images created by jenkins
    chmod -R 777 test/visualTesting/Jenkins
    
    # mark build as failed if the file test/failed/$BUILD_NUMBER.txt exists
    if [ -f test/failed/$BUILD_NUMBER.txt ]; then
        rm -rf test/failed/$BUILD_NUMBER.txt
        exit -1
    fi

==== 　
==== 　
=== Detail of Visual Testing

===== Sample Case

visual_testing_test.rb[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest/test/integration/visual_testing_test.rb]

===== Demo Video

{Rails Selenium Detail of Visual Testing}[https://www.youtube.com/watch?v=numB7dTUI50]

===== Describe in detail

In any test case, you can do visual testing by call ActiveSupport::VisualTestingHelper.init_vt[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest/test/visual_testing_helper.rb#L23] once (should be called only once in whole test case), passing driver into it to initiate Visual Testing, then call ActiveSupport::VisualTestingHelper.shot[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest/test/visual_testing_helper.rb#L57] and passing driver into it to take screenshot.


The init method will initiate image count and related folder path for a test case with current driver information.


The shot method will take a screenshot, and check whether there is already a "base image" based on the information including image count and folder path. If there is no "base image", the method store current shot as "base image" and convert it to rgba format after all test cases done. If there is already a "base image", the method store current shot as "new image", diff it with current "base image" and create a "diff image" if needed.

You can call shot method multiple times, the image count will increase automatically except you call "init" method again (should not do this).


If the parameter 
    skipRealDiff="true"
is specified, the process of convert "base image" will be skipped, the process of diff "new image" with "base image" will only do binary file compare and will not output "diff image". 


<b>NOTE:</b> Currently the information is stored with case name, you will need to modify this if you run a case with different drivers parallel.


Once you modified visual testing code (e.g., removed a shot method so the number of image changed) you will need to remove whole folder of base images to recapture base images, or handle it by the rails manage page.

==== 　
==== 　
=== Make Development Assistant

There is a hidden parameter "autoretest", the failed test case will re-run automatically and output only filtered error message if you specified the parameter "autoretest" to any value.

This way can make a test case become your assistant when you are coding.

This is also a way to test a test case it self, you can re-consider whether need to add something to a test case once you pass it with incomplete code.

The short video below demo the process of running test case and coding with autoretest.

{Rails Selenium Working Case Make Development Assistant}[https://www.youtube.com/watch?v=SNtsDxhnTNU]

The related files for this video are autoretest_test.rb[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest/test/integration/autoretest_test.rb] and for_autoretest.html[https://github.com/benbai123/RubyOnRails/blob/master/Practice/RubyOnRails/Test/Selenium/WorkinCase/SeleniumTest/vendor/html/for_autoretest.html]

==== 　
==== 　
=== Related Articles

{Install Ubuntu 14.04 on VirtualBox}[http://happy-rails-trial.blogspot.tw/2015/02/install-ubuntu-1404-on-virtualbox.html]

{Install Rails 4.1 on Ubuntu 14.04}[http://happy-rails-trial.blogspot.tw/2015/02/install-rails-41-on-ubuntu-1404.html]

{Rails, minitest and Selenium}[http://happy-rails-trial.blogspot.tw/2015/07/rails-minitest-and-selenium.html]

{Add Chrome Driver to Selenium}[http://happy-rails-trial.blogspot.tw/2015/07/add-chrome-driver-to-selenium.html]

{Use Remote Webdriver in Selenium}[http://happy-rails-trial.blogspot.tw/2015/07/use-remote-webdriver-in-selenium.html]

{Frequently Used Selenium Functions}[http://happy-rails-trial.blogspot.tw/2015/07/frequently-used-selenium-functions.html]

{Install Jenkins on Ubuntu 14.04}[http://happy-rails-trial.blogspot.tw/2015/07/install-jenkins-on-ubuntu-1404.html]

{Add Opera Driver to Selenium}[http://happy-rails-trial.blogspot.tw/2015/07/add-opera-driver-to-selenium.html]

{Test Multiple Version of Firefox in Selenium}[http://happy-rails-trial.blogspot.tw/2015/07/test-multiple-version-of-firefox-in.html]

{Take Screenshot with Ruby Selenium}[http://happy-rails-trial.blogspot.tw/2015/07/take-screenshot-with-ruby-selenium.html]

{Create Parameterized Test Case}[http://happy-rails-trial.blogspot.tw/2015/07/create-parameterized-test-case.html]

{Create Parameterized Test Service with Jenkins}[http://happy-rails-trial.blogspot.tw/2015/07/create-parameterized-test-service-with.html]

{Make Test Case as Assistant}[http://happy-rails-trial.blogspot.tw/2015/08/make-test-case-as-assistant.html]

{Image Compare in Ruby}[http://happy-rails-trial.blogspot.tw/2015/08/image-compare-in-ruby.html]

{Visual Testing with Selenium in Rails}[http://happy-rails-trial.blogspot.tw/2015/08/visual-testing-with-selenium-in-rails.html]

{Postpone Image Processing to All Test Cases Finished in Rails Selenium Visual Testing}[http://happy-rails-trial.blogspot.tw/2015/08/postpone-image-processing-to-all-test.html]

{Manage Image Files from Selenium Visual Testing}[http://happy-rails-trial.blogspot.tw/2015/08/manage-image-files-from-selenium-visual.html]

{Selenium with Rails -- The Working Case}[http://happy-rails-trial.blogspot.tw/2015/08/selenium-with-rails-working-case.html]

